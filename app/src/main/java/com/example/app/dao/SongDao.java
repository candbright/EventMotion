package com.example.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.app.common.bean.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SongName = new Property(1, String.class, "songName", false, "SONG_NAME");
        public final static Property SongMode = new Property(2, String.class, "songMode", false, "SONG_MODE");
        public final static Property Difficulty = new Property(3, int.class, "difficulty", false, "DIFFICULTY");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property ImageSrc = new Property(5, int.class, "imageSrc", false, "IMAGE_SRC");
        public final static Property UrlPath = new Property(6, String.class, "urlPath", false, "URL_PATH");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
    }

    private DaoSession daoSession;


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SONG_NAME\" TEXT," + // 1: songName
                "\"SONG_MODE\" TEXT," + // 2: songMode
                "\"DIFFICULTY\" INTEGER NOT NULL ," + // 3: difficulty
                "\"TITLE\" TEXT," + // 4: title
                "\"IMAGE_SRC\" INTEGER NOT NULL ," + // 5: imageSrc
                "\"URL_PATH\" TEXT," + // 6: urlPath
                "\"DESCRIPTION\" TEXT);"); // 7: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String songMode = entity.getSongMode();
        if (songMode != null) {
            stmt.bindString(3, songMode);
        }
        stmt.bindLong(4, entity.getDifficulty());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getImageSrc());
 
        String urlPath = entity.getUrlPath();
        if (urlPath != null) {
            stmt.bindString(7, urlPath);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String songMode = entity.getSongMode();
        if (songMode != null) {
            stmt.bindString(3, songMode);
        }
        stmt.bindLong(4, entity.getDifficulty());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getImageSrc());
 
        String urlPath = entity.getUrlPath();
        if (urlPath != null) {
            stmt.bindString(7, urlPath);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    protected final void attachEntity(Song entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // songMode
            cursor.getInt(offset + 3), // difficulty
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.getInt(offset + 5), // imageSrc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // urlPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongMode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDifficulty(cursor.getInt(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageSrc(cursor.getInt(offset + 5));
        entity.setUrlPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
